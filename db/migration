#!/bin/bash
## Dir
SCRIPT_DIR=`dirname $0`
ENV_DIR="$SCRIPT_DIR/env"
MIGRATION_DIR="$SCRIPT_DIR/migrate"

## Functions
usage () {
  echo "Usage: $0 [options] command"
  echo "Options:"
  echo "  -h, --help                       Print this help"
  echo "Commands:"
  echo "  setup --stack|binary <env>                      Init and run migraptions"
  echo "  createdb --stack|binary <name> <user>           Create a database for user"
  echo "  init --stack|binary <db-connection-string>      Init the postgresql-simple-migration table(s)"
  echo "  generate <name>                  Create a new migration file"
  echo "  migrate --stack|binary <db-connection-string>   Run all the migrations"
  echo "                                     (ignore executed ones)"
  echo "  validate --stack|binary <db-connection-string>  Test all the migrations"
  echo "                                     (== migrate without changing the DB)"
  echo "db-connection-string example:"
  echo "  \"postgresql://db_user:password@db_server:db_port/db_name\""
  echo "Envs:"
  echo "  test      DB connection string for development (./env/test)"
}

arg_check () {
  if [ $1 -lt $2 ]; then
    usage
    exit 1
  fi
}

env_exists () {
  if [ ! -f "$ENV_DIR/$1" ]; then
    echo "No such file : $ENV_DIR/$1"
    exit 1
  fi
}

migrate_cmd () {
  case "$1" in
    --stack)
        stack exec -- migrate $2 $3 $4
        ;;

    --binary)
        ../migrate $2 $3 $4
        ;;

    *)
      echo $1
      usage
      exit 1
      ;;
  esac
}

## MAIN
arg_check $# 1

case "$1" in
  -h | --help)
    usage
    ;;

  setup)
    arg_check $# 3
    env_exists $3
    migrate_cmd $2 init "`cat $ENV_DIR/$3`"
    migrate_cmd $2 migrate "`cat $ENV_DIR/$3`" $MIGRATION_DIR
    ;;

  createdb)
    arg_check $# 4
    sudo -u postgres sh -c "echo 'CREATE DATABASE $3 OWNER $4;' | psql"
    ;;

  init)
    arg_check $# 3
    migrate_cmd $2 init $3
    ;;

  generate)
    arg_check $# 2
    touch $MIGRATION_DIR/`date +"%Y%m%d%H%M%S00"`_$2.sql
    ;;

  migrate)
    arg_check $# 3
    migrate_cmd $2 migrate $3 $MIGRATION_DIR
    ;;

  validate)
    arg_check $# 3
    migrate_cmd $2 validate $3 $MIGRATION_DIR
    ;;

  *)
    usage
    exit 1
    ;;
esac

exit 0
